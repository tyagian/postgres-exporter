# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: quay.io/prometheuscommunity/postgres-exporter #docker-repo.ehealthinsurance.com/obse/postgres-exporter
  tag: v0.10.1 #0.0.1 
  pullPolicy: IfNotPresent

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistrKeySecretName

service:
  type: ClusterIP
  port: 80
  targetPort: 9187
  name: http
  labels: {}
  annotations: {}

serviceMonitor:
  # When set true then use a ServiceMonitor to configure scraping
  enabled: true
  # Set the namespace the ServiceMonitor should be deployed
  namespace: "prometheus"
  # Set how frequently Prometheus should scrape
  interval: 90s
  # Set path to cloudwatch-exporter telemtery-path
  telemetryPath: /metrics
  # Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator
  labels:
    name: postgres-exporter
    release: prometheus-operator
  # Set timeout for scrape
  # timeout: 10s
  # Set of labels to transfer from the Kubernetes Service onto the target
  # targetLabels: []
  # MetricRelabelConfigs to apply to samples before ingestion
  # metricRelabelings: []
  # Set relabel_configs as per https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
  # relabelings: []

prometheusRule:
  enabled: false
  additionalLabels: {}
  #namespace: "prometheus"
  rules: []
    ## These are just examples rules, please adapt them to your needs.
    ## Make sure to constraint the rules to the current prometheus-postgres-exporter service.
    # - alert: HugeReplicationLag
    #   expr: pg_replication_lag{service="{{ template "prometheus-postgres-exporter.fullname" . }}"} / 3600 > 1
    #   for: 1m
    #   labels:
    #     severity: critical
    #   annotations:
    #     description: replication for {{ template "prometheus-postgres-exporter.fullname" . }} PostgreSQL is lagging by {{ "{{ $value }}" }} hour(s).
    #     summary: PostgreSQL replication is lagging by {{ "{{ $value }}" }} hour(s).

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #    memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

rbac:
  # Specifies whether RBAC resources should be created
  create: true
  # Specifies whether a PodSecurityPolicy should be created
  pspEnabled: false
serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
  # Add annotations to the ServiceAccount, useful for EKS IAM Roles for Service Accounts or Google Workload Identity.
  annotations: {}

# Add a default ingress to allow namespace access to service.targetPort
# Helpful if other NetworkPolicies are configured in the namespace
networkPolicy:
  # Specifies whether a NetworkPolicy should be created
  enabled: false
  # Set labels for the NetworkPolicy
  labels: {}

securityContext: {}
  # The securityContext this Pod should use. See https://kubernetes.io/docs/concepts/policy/security-context/ for more.
  # runAsUser: 65534

config:
  datasource: {}
    # Specify one of both datasource or datasourceSecret
    #host: "aws-aurora-postgresql11-qa.cluster-crbt0lofm6sv.us-west-2.rds.amazonaws.com"
    #user: """
    # Only one of password, passwordSecret and pgpassfile can be specified
    #password: ""
    # Specify passwordSecret if DB password is stored in secret.
    #passwordSecret: {}
    # Secret name
    #  name:
    # Password key inside secret
    #  key:
    #pgpassfile: ''
    # If pgpassfile is set, it is used to initialize the PGPASSFILE environment variable.
    # See https://www.postgresql.org/docs/14/libpq-pgpass.html for more info.
    #port: "5432"
    #database: 'qa'
    #sslmode: require
    #extraParams: ''
  datasourceSecret:
    # Specifies if datasource should be sourced from secret value in format: postgresql://login:password@hostname:port/dbname?sslmode=disable
    # Multiple Postgres databases can be configured by comma separated postgres connection strings
    # Secret name
    name: postgres-exporter
    # Connection string key inside secret
    key: DATA_SOURCE_NAME
  disableDefaultMetrics: true
  disableSettingsMetrics: false
  autoDiscoverDatabases: false
  excludeDatabases: []
  includeDatabases: []
  constantLabels: {}
  # possible values debug, info, warn, error, fatal
  logLevel: "info"
  # possible values logfmt, json
  logFormat: "json"
  # Enable queries from an external configmap, enable it will disable inline queries below
  externalQueries:
    enabled: false
    configmap: postgresql-common-exporter-queries
  # These are the default queries that the exporter will run, extracted from: https://github.com/prometheus-community/postgres_exporter/blob/master/queries.yaml
  queries: |-
    pg_locks:
      query: |
       SELECT
         pgc.relname AS table_name,
         pgl.locktype AS pgl_locktype,
         pgl.mode AS pgl_mode,
         pgl.pid AS pgl_pid,
         psa.state AS psa_state,
         psa.query AS psa_query
       FROM pg_locks pgl JOIN pg_class pgc ON pgl.relation=pgc.oid JOIN pg_stat_activity psa ON pgl.pid=psa.pid
       where psa.state='active'
      metrics:
        - table_name:
            usage: "LABEL"
            description: "table name"
        - pgl_locktype:
            usage: "LABEL"
            description: "pgl locktype"
        - pgl_mode:
            usage: "LABEL"
            description: "pgl mode"
        - pgl_pid:
            usage: "GAUGE"
            description: "pgl pid"
        - psa_state:
            usage: "LABEL"
            description: "psa state"
        - psa_query:
            usage: "LABEL"
            description: "psa query"

    pg_process_stats:
      query: SELECT COUNT(*) AS active_process FROM pg_stat_activity WHERE state='active' AND state IS NOT NULL GROUP BY state
      metrics:
        - active_process:
            usage: "GAUGE"
            description: "Number of PostgreSQL processes with their active states"

    pg_process_state:
      query: SELECT COUNT(*) AS idle_process FROM pg_stat_activity WHERE state='idle' AND state IS NOT NULL GROUP BY state
      metrics:
        - idle_process:
            usage: "GAUGE"
            description: "Number of postgres process with idle state"

    pg_connections:
      query: "SELECT setting AS max_count FROM pg_settings WHERE name = 'pg_connections'"
      metrics:
        - max_count:
            usage: "COUNTER"
            description: "max connections in the database"

    pg_socket:
      query: "SELECT inet_server_port() as port_number"
      metrics:
        - port_number:
            usage: "GAUGE"
            description: "postgres socket number"

    pg_index:
      query: |
       SELECT
         schemaname as db_name,
         relname as table_name,
         100 * idx_scan / (seq_scan + idx_scan) AS pg_idx_usage_percent,
         n_live_tup AS pg_idx_usage_rows
       FROM pg_stat_user_tables
         WHERE seq_scan + idx_scan > 0
         ORDER BY pg_idx_usage_percent desc
      metrics:
        - db_name:
            usage: "LABEL"
            description: "db name"
        - table_name:
            usage: "LABEL"
            description: "table name"
        - pg_idx_usage_percent:
            usage: "GAUGE"
            description: "pg idx"
        - pg_idx_usage_rows:
            usage: "COUNTER"
            description: "pg idx usage rows"

    pg_database:
      query: |
       SELECT
         pg_database.datname AS datname,
         pg_size_pretty(pg_database_size(pg_database.datname)) AS size
       FROM
         pg_database ORDER BY size desc
      metrics:
        - datname:
            usage: "LABEL"
            description: "name of database"
        - size:
            usage: "LABEL"
            description: "size of current database"

    pg_stat_user_tables:
      query: |
       SELECT
         current_database() datname,
         schemaname,
         relname,
         seq_tup_read,
         idx_scan,
         idx_tup_fetch,
         n_tup_ins,
         n_tup_upd,
         n_tup_del,
         n_tup_hot_upd,
         n_live_tup,
         n_dead_tup,
         n_mod_since_analyze,
         COALESCE(last_vacuum, '1970-01-01Z') as last_vacuum,
         COALESCE(last_autovacuum, '1970-01-01Z') as last_autovacuum,
         vacuum_count,
         autovacuum_count,
         analyze_count,
         autoanalyze_count
       FROM
         pg_stat_user_tables
      metrics:
        - datname:
            usage: "LABEL"
            description: "Name of current database"
        - schemaname:
            usage: "LABEL"
            description: "Name of the schema that this table is in"
        - relname:
            usage: "LABEL"
            description: "Name of this table"
        - seq_tup_read:
            usage: "COUNTER"
            description: "Number of live rows fetched by sequential scans"
        - idx_scan:
            usage: "COUNTER"
            description: "Number of index scans initiated on this table"
        - idx_tup_fetch:
            usage: "COUNTER"
            description: "Number of live rows fetched by index scans"
        - n_tup_ins:
            usage: "COUNTER"
            description: "Number of rows inserted"
        - n_tup_upd:
            usage: "COUNTER"
            description: "Number of rows updated"
        - n_tup_del:
            usage: "COUNTER"
            description: "Number of rows deleted"
        - n_tup_hot_upd:
            usage: "COUNTER"
            description: "Number of rows HOT updated (i.e., with no separate index update required)"
        - n_live_tup:
            usage: "GAUGE"
            description: "Estimated number of live rows"
        - n_dead_tup:
            usage: "GAUGE"
            description: "Estimated number of dead rows"
        - n_mod_since_analyze:
            usage: "GAUGE"
            description: "Estimated number of rows changed since last analyze"
        - last_vacuum:
            usage: "GAUGE"
            description: "Last time at which this table was manually vacuumed (not counting VACUUM FULL)"
        - last_autovacuum:
            usage: "GAUGE"
            description: "Last time at which this table was vacuumed by the autovacuum daemon"
        - vacuum_count:
            usage: "COUNTER"
            description: "Number of times this table has been manually vacuumed (not counting VACUUM FULL)"
        - autovacuum_count:
            usage: "COUNTER"
            description: "Number of times this table has been vacuumed by the autovacuum daemon"
        - analyze_count:
            usage: "COUNTER"
            description: "Number of times this table has been manually analyzed"
        - autoanalyze_count:
            usage: "COUNTER"
            description: "Number of times this table has been analyzed by the autovacuum daemon"

    pg_statio_user_tables:
      query: "SELECT current_database() datname, schemaname, relname, idx_blks_read FROM pg_statio_user_tables"
      metrics:
        - datname:
            usage: "LABEL"
            description: "Name of current database"
        - schemaname:
            usage: "LABEL"
            description: "Name of the schema that this table is in"
        - relname:
            usage: "LABEL"
            description: "Name of this table"
        - idx_blks_read:
            usage: "COUNTER"
            description: "Number of disk blocks read from all indexes on this table"
    pg_database:
      query: "SELECT pg_database.datname, pg_database_size(pg_database.datname) as size_bytes FROM pg_database"
      master: true
      cache_seconds: 30
      metrics:
        - datname:
            usage: "LABEL"
            description: "Name of the database"
        - size_bytes:
            usage: "GAUGE"
            description: "Disk space used by the database"

    pg_stat_statements:
      query: "SELECT t2.rolname, t3.datname, calls, ( total_plan_time + total_exec_time ) / 1000 as total_time_seconds, ( min_plan_time + min_exec_time ) / 1000 as min_time_seconds, ( max_plan_time + max_exec_time ) / 1000 as max_time_seconds, ( mean_plan_time + mean_exec_time ) / 1000 as mean_time_seconds, rows FROM pg_stat_statements t1 JOIN pg_roles t2 ON (t1.userid=t2.oid) JOIN pg_database t3 ON (t1.dbid=t3.oid) WHERE t2.rolname != 'rdsadmin' AND queryid IS NOT NULL"
      master: true
      metrics:
        - rolname:
            usage: "LABEL"
            description: "Name of user"
        - datname:
            usage: "LABEL"
            description: "Name of database"
        - calls:
            usage: "COUNTER"
            description: "Number of times executed"
        - total_time_seconds:
            usage: "COUNTER"
            description: "Total time spent in the statement, in milliseconds"
        - min_time_seconds:
            usage: "GAUGE"
            description: "Minimum time spent in the statement, in milliseconds"
        - max_time_seconds:
            usage: "GAUGE"
            description: "Maximum time spent in the statement, in milliseconds"
        - mean_time_seconds:
            usage: "GAUGE"
            description: "Mean time spent in the statement, in milliseconds"
        - stddev_time_seconds:
            usage: "GAUGE"
            description: "Population standard deviation of time spent in the statement, in milliseconds"
        - rows:
            usage: "COUNTER"
            description: "Total number of rows retrieved or affected by the statement"

nodeSelector: {}

tolerations: []

affinity: {}

annotations: {}

podLabels: {}

# Configurable health checks
livenessProbe:
  initialDelaySeconds: 0
  timeoutSeconds: 1

readinessProbe:
  initialDelaySeconds: 0
  timeoutSeconds: 1


# Init containers, e. g. for secrets creation before the exporter
initContainers: []
  # - name:
  #   image:
  #   volumeMounts:
  #     - name: creds
  #       mountPath: /creds

# Additional sidecar containers, e. g. for a database proxy, such as Google's cloudsql-proxy
extraContainers: []

# Additional volumes, e. g. for secrets used in an extraContainer
extraVolumes: []

# Uncomment for mounting custom ca-certificates
#  - name: ssl-certs
#    secret:
#      defaultMode: 420
#      items:
#      - key: ca-certificates.crt
#        path: ca-certificates.crt
#      secretName: ssl-certs

# Additional volume mounts
extraVolumeMounts: []

# Uncomment for mounting custom ca-certificates file into container
#  - name: ssl-certs
#    mountPath: /etc/ssl/certs/ca-certificates.crt
#    subPath: ca-certificates.crt

podDisruptionBudget:
  enabled: false
  maxUnavailable: 1
